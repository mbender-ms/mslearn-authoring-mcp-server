#!/bin/bash

# Microsoft Learn Authoring MCP Server - Quick Setup Script
# This script automates the setup process for the Python MCP server

set -e  # Exit on any error

echo "🚀 Setting up Microsoft Learn Authoring MCP Server (Python)"
echo "============================================================="

# Check Python version
echo "📋 Checking Python version..."
python_version=$(python3 --version 2>/dev/null || python --version 2>/dev/null || echo "Python not found")
echo "Found: $python_version"

if ! command -v python3 &> /dev/null && ! command -v python &> /dev/null; then
    echo "❌ Error: Python 3.8+ is required but not found"
    echo "Please install Python from https://python.org"
    exit 1
fi

# Use python3 if available, otherwise python
PYTHON_CMD="python3"
if ! command -v python3 &> /dev/null; then
    PYTHON_CMD="python"
fi

# Create project directory
PROJECT_DIR="mslearn-authoring-mcp-server"
echo "📁 Creating project directory: $PROJECT_DIR"
mkdir -p "$PROJECT_DIR"
cd "$PROJECT_DIR"

# Create virtual environment
echo "🔧 Creating virtual environment..."
$PYTHON_CMD -m venv venv

# Activate virtual environment
echo "⚡ Activating virtual environment..."
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    # Windows
    source venv/Scripts/activate
else
    # macOS/Linux
    source venv/bin/activate
fi

# Upgrade pip
echo "📦 Upgrading pip..."
pip install --upgrade pip

# Create requirements.txt
echo "📝 Creating requirements.txt..."
cat > requirements.txt << EOF
# Microsoft Learn Authoring MCP Server Dependencies
mcp>=1.0.0
requests>=2.28.0
beautifulsoup4>=4.11.0
lxml>=4.9.0
markdownify>=0.11.0
EOF

# Install dependencies
echo "📦 Installing dependencies..."
pip install -r requirements.txt

# Create the main server file placeholder
echo "📄 Creating server file placeholder..."
cat > mslearn_authoring_server.py << 'EOF'
#!/usr/bin/env python3
"""
Microsoft Learn Content Authoring MCP Server

This is a placeholder file. Please copy the complete server code
from the provided artifact to replace this content.
"""

print("Microsoft Learn Authoring MCP Server")
print("Please replace this file with the complete server code.")
EOF

# Create VSCode configuration directory
echo "⚙️  Creating VSCode configuration..."
mkdir -p .vscode

# Get current directory for configuration
CURRENT_DIR=$(pwd)

# Create MCP configuration
cat > .vscode/mcp.json << EOF
{
  "mcpServers": {
    "mslearn-authoring": {
      "command": "python",
      "args": ["mslearn_authoring_server.py"],
      "cwd": "$CURRENT_DIR",
      "env": {
        "PYTHONPATH": "."
      }
    }
  }
}
EOF

# Create a simple test script
echo "🧪 Creating test script..."
cat > test_server.py << 'EOF'
#!/usr/bin/env python3
"""Simple test script to verify the server setup."""

import sys
import subprocess

def test_dependencies():
    """Test that all required dependencies are installed."""
    required_packages = ['mcp', 'requests', 'bs4', 'markdownify']
    
    print("Testing dependencies...")
    for package in required_packages:
        try:
            __import__(package)
            print(f"✅ {package} - OK")
        except ImportError:
            print(f"❌ {package} - Missing")
            return False
    return True

def test_server():
    """Test that the server file exists and is valid Python."""
    print("\nTesting server file...")
    try:
        with open('mslearn_authoring_server.py', 'r') as f:
            content = f.read()
            if 'placeholder' in content.lower():
                print("⚠️  Server file is still a placeholder")
                print("   Please copy the complete server code from the artifact")
                return False
            else:
                print("✅ Server file exists and appears complete")
                return True
    except FileNotFoundError:
        print("❌ Server file not found")
        return False

if __name__ == "__main__":
    print("Microsoft Learn Authoring MCP Server - Setup Test")
    print("=" * 50)
    
    deps_ok = test_dependencies()
    server_ok = test_server()
    
    if deps_ok and server_ok:
        print("\n🎉 Setup appears successful!")
        print("\nNext steps:")
        print("1. Copy the complete server code to mslearn_authoring_server.py")
        print("2. Open this project in VSCode")
        print("3. Use the MCP server with GitHub Copilot")
    else:
        print("\n⚠️  Setup needs attention. See messages above.")
        sys.exit(1)
EOF

# Create README
echo "📚 Creating README..."
cat > README.md << 'EOF'
# Microsoft Learn Authoring MCP Server

A Python-based MCP server for Microsoft Learn content authoring.

## Setup Complete! 

Your project structure:
```
mslearn-authoring-mcp-server/
├── mslearn_authoring_server.py    # Main server (replace placeholder)
├── requirements.txt               # Dependencies
├── test_server.py                # Setup test script
├── .vscode/mcp.json              # VSCode MCP configuration
├── venv/                         # Virtual environment
└── README.md                     # This file
```

## Next Steps

1. **Replace the placeholder server code:**
   Copy the complete Python server code from the provided artifact to `mslearn_authoring_server.py`

2. **Test the setup:**
   ```bash
   python test_server.py
   ```

3. **Open in VSCode:**
   ```bash
   code .
   ```

4. **Use with GitHub Copilot:**
   ```
   @mslearn-authoring fetch the Microsoft style guide welcome page
   ```

## Virtual Environment

To reactivate the virtual environment later:
```bash
# On Windows:
venv\Scripts\activate

# On macOS/Linux:
source venv/bin/activate
```
EOF

# Make scripts executable on Unix-like systems
if [[ "$OSTYPE" != "msys" && "$OSTYPE" != "win32" ]]; then
    chmod +x mslearn_authoring_server.py
    chmod +x test_server.py
fi

# Final instructions
echo ""
echo "✅ Setup completed successfully!"
echo ""
echo "📁 Project created in: $PWD"
echo ""
echo "📋 Next steps:"
echo "1. Copy the complete server code to mslearn_authoring_server.py"
echo "2. Test setup: python test_server.py"
echo "3. Open in VSCode: code ."
echo "4. Start using with GitHub Copilot!"
echo ""
echo "💡 Tip: Remember to activate the virtual environment when working:"
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    echo "   venv\\Scripts\\activate"
else
    echo "   source venv/bin/activate"
fi
echo ""
echo "🎉 Happy authoring!"
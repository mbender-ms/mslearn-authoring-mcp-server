[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mslearn-authoring-mcp-server"
version = "1.0.0"
description = "MCP server for Microsoft Learn content authoring and style guide compliance"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "mcp",
    "microsoft-learn",
    "content-authoring",
    "style-guide",
    "documentation",
    "writing",
    "compliance"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Technical Writers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Documentation",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup :: HTML",
    "Topic :: Text Processing :: Markup :: Markdown",
]

# Core dependencies
dependencies = [
    "mcp>=1.0.0",
    "requests>=2.28.0",
    "beautifulsoup4>=4.11.0",
    "markdownify>=0.11.0",
    "lxml>=4.9.0",
]

# Optional dependency groups
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",  # For testing HTTP requests
    "responses>=0.22.0",  # For mocking HTTP responses
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
typing = [
    "mypy>=1.0.0",
    "types-requests>=2.28.0",
    "types-beautifulsoup4>=4.11.0",
]

# Entry points for command-line usage
[project.scripts]
mslearn-authoring-mcp = "mslearn_authoring_server:main"
mslearn-mcp-server = "mslearn_authoring_server:main"

# Project URLs
[project.urls]
Homepage = "https://github.com/yourusername/mslearn-authoring-mcp-server"
Documentation = "https://github.com/yourusername/mslearn-authoring-mcp-server#readme"
Repository = "https://github.com/yourusername/mslearn-authoring-mcp-server.git"
Issues = "https://github.com/yourusername/mslearn-authoring-mcp-server/issues"
Changelog = "https://github.com/yourusername/mslearn-authoring-mcp-server/blob/main/CHANGELOG.md"

# Setuptools configuration
[tool.setuptools]
py-modules = ["mslearn_authoring_server"]

[tool.setuptools.packages.find]
where = ["."]
include = ["mslearn_authoring_server*"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "bs4.*",
    "markdownify.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mslearn_authoring_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["mslearn_authoring_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 linting (via setup.cfg alternative)
[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".tox",
    ".mypy_cache",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "22.12.0",
        hooks = [
            {id = "black"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [
            {id = "flake8"}
        ]
    },
]